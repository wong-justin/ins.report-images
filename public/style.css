:root {
	--radius: 4px; /* a small unit, also used for border radius. should be unit of basis for spacings and other cales *2, *4, *8, *16, etc. because i heard that's good aesthetic design */
	--img-size: 128px;
}

* {
	box-sizing: border-box;
}

html, body, div, img { 
	padding: 0;
	margin: 0;
	border: 1px solid red;
}

/* TODO:
use this sidebar strategy for the gallery being the sidebar of the form
https://every-layout.dev/layouts/sidebar/

"wrap when elements are of equal width"

*/

.gallery-container {
	display: flex;
	flex-direction: column;
	justify-content: center;
}

/*
responsive grid effect shown here:
https://every-layout.dev/demos/grid-cards/

.grid {
    grid-template-columns: repeat(auto-fill, minmax(min(250px, 100%), 1fr));
}

apparently it's the most useful / famous css snippet for css grid

responsive from 1 to inifinite cols, with row wrap too

"children will grow to be between 250 and 499px i think (because at 500px, theyll shrink to fit a new child)"

actually ~500 is the limit for one col ,but gets lower with more cols as overflow gets distributed across multiple children
maxwidth at 1col: 2x
maxwidth at 2col: 3x/2
maxwidth at 3col: 4x/3
and then +/- some px for padding, margins, borders

*/

.gallery {
	display: grid;
	grid-template-columns: repeat(auto-fill, minmax(min(128px, 100%), 1fr));

	grid-gap: calc(2 * var(--radius)); /* between children */
	padding: calc(2 * var(--radius)); /* outside outer children, aka inside the 4 sides of this container */
}

/* supposed to hold thumbnails */
figure {
  /* if img text is absolute position overlayed, 
	   then parent img container has to be position relative */
	position: relative;
	border: 1px solid black;
	border-radius: var(--radius);
	/* cursor: pointer; */
	aspect-ratio: 1.0;
	margin: 0; /* reset default `figure` styling */

	/* just in case child isnt square */
	overflow: hidden;
	display: flex;
	justify-content: center;
}

figcaption {
	position: absolute;
	bottom: 0;
	margin: 0;
	width: 100%; /* needs width to invoke overflow ellipsis */
	border: var(--radius) solid rgba(0,0,0,0.0); /* ends up matching background color */
	background-color: rgba(255,255,255,0.5); /* for some higher contrast in case img background isnt friendly */
	border-radius: 0 0 var(--radius) var(--radius);

	/* this should be applied to any single-line text element that could be long and overflow */
	overflow: hidden;
	white-space: nowrap;
	text-overflow: ellipsis;
}

figure > .delete-btn {
	position: absolute;
	top: 0;
	right: 0;
	padding: var(--radius);
	/* border-radius: var(--radius); /* 0 var(--radius) 0 var(--radius); */

	/* background-color: rgba(255,255,255,0.5); /* for some higher contrast in case img background isnt friendly */
}

img {
	border-radius: var(--radius);
}

button {
	cursor: pointer;
}
